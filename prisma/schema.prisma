generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 系统用户表模型
model user {
  id        Int      @id @default(autoincrement())
  account   String   @unique(map: "User_account_key")
  password  String
  role      Role
  /// 用户名称
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacher   Teacher?
  student   student?
}

// 角色字典
enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// 学期表模型
model semester {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
  beginDate DateTime @db.Date
  endDate   DateTime @db.Date
}

// 课程表模型
model course {
  id              Int               @id @default(autoincrement())
  name            String
  // 描述
  describe        String
  // 学分
  credit          Int
  // 学时
  studyHours      Int
  teachers        Teacher[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // exams           Exam[]
  courseOnTeacher courseOnTeacher[]
  Exam            Exam[]
  Schedules       Schedules[]
  StudentCourse   StudentCourse[]
}

// 教师表模型
model Teacher {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String
  age             Int
  title           Teacher_Title
  // course          course[]
  courseOnTeacher courseOnTeacher[]
  course          course?           @relation(fields: [courseId], references: [id])
  courseId        Int?
  userId          Int?              @unique
  user            user?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model courseOnTeacher {
  course    course  @relation(fields: [courseId], references: [id])
  courseId  Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId Int

  @@id([courseId, teacherId])
}

// 学生表模型
model student {
  id            Int             @id @default(autoincrement())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        Int?            @unique
  user          user?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  StudentCourse StudentCourse[]
}

// 选课表模型=> 学生m to n课程 多对多关系
model StudentCourse {
  studentId Int
  courseId  Int
  student   student @relation(fields: [studentId], references: [id])
  course    course  @relation(fields: [courseId], references: [id])

  @@id([studentId, courseId])
}

// 考试表模型
model Exam {
  id          Int         @id @default(autoincrement())
  name        String
  courseId    Int
  // 考试多少分钟数
  minutes     Int
  // 考试地点
  position    Classroom   @relation(fields: [classroomId], references: [id])
  classroomId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  course      course      @relation(fields: [courseId], references: [id])
  Schedules   Schedules[]
}

// 教室表模型
model Classroom {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  exams     Exam[]
  Schedules Schedules[]
}

// 排期表模型
model Schedules {
  id          Int            @id @default(autoincrement())
  classroomId Int
  examId      Int?
  courseId    Int?
  type        Schedules_Type
  // 排期的日期
  whenDay     DateTime       @db.Date
  // 授课老师
  teacherId   Int?
  // 课程开始是第几节
  courseBegin Int?
  // 第几节课
  courseNum   Int?
  // 考试开始时间
  examBegin   String?
  // 考试结束时间
  examEnd     String?
  // 监考老师
  teacherIds  String?        @db.Text
  // 考试学生
  studentIds  String?        @db.Text
  classroom   Classroom      @relation(fields: [classroomId], references: [id])
  exam        Exam?          @relation(fields: [examId], references: [id])
  course      course?        @relation(fields: [courseId], references: [id])

  @@unique([whenDay, courseNum, teacherId])
}

enum Schedules_Type {
  COURSE
  EXAM
}

// 老师头衔字典
enum Teacher_Title {
  FORMAL
  DEPUTY
}
